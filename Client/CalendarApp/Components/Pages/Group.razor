@page "/groups"
@using System.Security.Claims
@using CalendarApp.Services
@using DTOs
@using Microsoft.AspNetCore.Components.Authorization
@inject IGroupService GroupService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<link href="group.css" rel="stylesheet" />

<PageTitle>Groups</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="container mt-5">
            <h2 class="text-center mb-4">Groups</h2>

            <div class="row">
                <div class="col-md-6 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <h3 class="card-title">Create a New Group</h3>
                            @if (!string.IsNullOrEmpty(createError))
                            {
                            <div class="alert alert-danger mb-4" role="alert">@createError</div>
                            }

                            @if (!string.IsNullOrEmpty(createSuccess))
                            {
                            <div class="alert alert-success mb-4">@createSuccess</div>
                            }
                            <button class="btn btn-primary mb-3" @onclick="ShowCreateGroupForm">Create Group</button>

                            @if (isCreateGroupFormVisible)
                            {
                                <form @onsubmit="CreateGroupAsync">
                                    <div class="mb-3">
                                        <label for="groupName" class="form-label">Group Name</label>
                                        <input type="text" class="form-control" id="groupName" @bind="groupName" required />
                                    </div>
                                    <button type="submit" class="btn btn-primary">Create Group</button>
                                </form>
                            }
                        </div>
                    </div>
                </div>

                <div class="col-md-6 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <h3 class="card-title">Join an Existing Group</h3>
                            @if (groups.Count == 0)
                            {
                                <p>No available groups to join.</p>
                            }
                            else
                            {
                                if(@groups.Count == 1)
                                {
                                    <p>1 group available to join.</p>
                                }
                                else
                                {
                                    <p>@groups.Count groups available to join.</p>
                                }
                                <ul class="list-group">
                                    @foreach (var group in groups)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            @group.Name
                                            <button class="btn btn-secondary" @onclick="() => JoinGroupAsync(group.Id)">Join</button>
                                        </li>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container mt-5">
            <h3>Please log in to access the groups</h3>
            <div class="d-flex align-items-center gap-3 mt-3">
                <button class="btn btn-primary" @onclick='() => NavigationManager.NavigateTo("login")'>Log in</button>
                <button class="btn btn-secondary" @onclick='() => NavigationManager.NavigateTo("register")'>Register</button>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string groupName;
    private string? createError;
    private string? createSuccess;
    private List<GroupDto> groups = new();
    private int? currentUserId;
    private bool isCreateGroupFormVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUserAsync();
        await LoadGroupsAsync();
    }

    private async Task LoadCurrentUserAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
                currentUserId = int.TryParse(userId, out var id) ? id : (int?)null;
            }
        }
        catch (Exception ex)
        {
            createError = $"Error loading user: {ex.Message}";
        }
    }

    private async Task LoadGroupsAsync()
    {
        try
        {
            if (currentUserId.HasValue)
            {
                groups = await GroupService.GetAvailableGroupsAsync(currentUserId.Value);
            }
        }
        catch (Exception ex)
        {
            createError = $"Error loading groups: {ex.Message}";
        }
    }

    private void ShowCreateGroupForm()
    {
        isCreateGroupFormVisible = true;
    }

    private async Task CreateGroupAsync()
    {
        try
        {
            if (currentUserId == null)
            {
                createError = "Invalid user ID.";
                return;
            }

            var createGroupDto = new CreateGroupDto
            {
                Name = groupName,
                CreatorId = currentUserId.Value
            };

            await GroupService.CreateGroupAsync(createGroupDto);
            createSuccess = "Group created successfully.";
            createError = null;
            groupName = string.Empty;
            isCreateGroupFormVisible = false;
            await LoadGroupsAsync();
        }
        catch (Exception ex)
        {
            createSuccess = null;
            createError = $"Error creating group: {ex.Message}";
        }
    }

    private async Task JoinGroupAsync(int groupId)
    {
        try
        {
            if (currentUserId == null)
            {
                createError = "Invalid user ID.";
                return;
            }

            await GroupService.JoinGroupAsync(groupId, currentUserId.Value);
            createSuccess = "Joined group successfully.";
            createError = null;
            await LoadGroupsAsync();
        }
        catch (Exception ex)
        {
            createSuccess = null;
            createError = $"Error joining group: {ex.Message}";
        }
    }
}